set ratios 1:2:3
set icons true
map . set hidden!

set previewer ~/.config/lf/preview
set cleaner ~/.config/lf/cleaner

set drawbox
set shell sh 
set shellopts '-eu'
set ifs "\n"

cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}

cmd bulk-rename ${{
    old="$(mktemp)"
    new="$(mktemp)"
    if [ -n "$fs" ]; then
        fs="$(basename $fs)"
    else
        fs="$(ls)"
    fi
    printf '%s\n' "$fs" >"$old"
    printf '%s\n' "$fs" >"$new"
    $EDITOR "$new"
    [ "$(wc -l < "$new")" -ne "$(wc -l < "$old")" ] && exit
    paste "$old" "$new" | while IFS= read -r names; do
        src="$(printf '%s' "$names" | cut -f1)"
        dst="$(printf '%s' "$names" | cut -f2)"
        if [ "$src" = "$dst" ] || [ -e "$dst" ]; then
            continue
        fi
        mv -- "$src" "$dst"
    done
    rm -- "$old" "$new"
    lf -remote "send $id unselect"
}}

# Custom Functions
cmd mkdir ${{
  printf "Directory Name: "
  read ans
  mkdir $ans
}}

cmd mkfile ${{
  printf "File Name: "
  read ans
  $EDITOR $ans
}}

# Archive bindings
cmd unarchive ${{
  case "$f" in
      *.zip) unzip "$f" ;;
      *.tar.gz) tar -xzvf "$f" ;;
      *.tar.bz2) tar -xjvf "$f" ;;
      *.tar) tar -xvf "$f" ;;
      *) echo "Unsupported format" ;;
  esac
}}

# Execute exe
cmd execute ${{
	wine "$f"
}}

cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# Trash bindings
cmd trash ${{
  files=$(printf "$fx" | tr '\n' ';')
  while [ "$files" ]; do
    file=${files%%;*}

    trash-put "$(basename "$file")"
    if [ "$files" = "$file" ]; then
      files=''
    else
      files="${files#*;}"
    fi
  done
}}

cmd devour-launch ${{
    devour-launch.sh $f
}}

cmd fzf_jump ${{
    res="$(find . -maxdepth 2 | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_JUMP ${{
    res="$(find . | fzf --reverse --header='Jump to location' | sed 's/\\/\\\\/g;s/"/\\"/g')"
    if [ -d "$res" ] ; then
        cmd="cd"
    elif [ -f "$res" ] ; then
        cmd="select"
    else
        exit 0
    fi
    lf -remote "send $id $cmd \"$res\""
}}

cmd fzf_search ${{
    res="$( \
        RG_PREFIX="rg --column --line-number --no-heading --color=always \
            --smart-case "
        FZF_DEFAULT_COMMAND="$RG_PREFIX ''" \
            fzf --bind "change:reload:$RG_PREFIX {q} || true" \
            --ansi --layout=reverse --header 'Search in files' \
            | cut -d':' -f1
    )"
    [ ! -z "$res" ] && lf -remote "send $id select \"$res\""
}}

cmd restore_trash ${{
  trash-restore
}}

# Bindings
# Remove some defaults
map m
map o
map n
map "'"
map '"'
map d

map t devour-launch 

map au unarchive
map ae execute

map <c-f> fzf_jump
map <a-f> fzf_JUMP
map <c-s> fzf_search

# Basic Functions
map . set hidden!
map DD delete
map p paste
map x cut
map y copy
map <enter> open
map R reload
map mf mkfile
map md mkdir
map C clear

map dd trash
map dr restore_trash

# Movement
map gD cd ~/documents
map gdm cd ~/documents/math
map gdS cd ~/documents/school/
map gdsr cd ~/documents/school/2_rs1/
map gdsb cd ~/documents/school/7_bio//
map gdsa cd ~/documents/school/4_acompscif/
map gdse cd ~/documents/school/5_english/
map gdsd cd ~/documents/school/jvdebate/
map gdp cd ~/documents/programming/

map gL cd ~/.local
map glb cd ~/.local/bin
map gls cd ~/.local/share
map gll cd ~/.local/lib

map gR cd /
map grb cd /boot
map grm cd /mnt
map grd cd /dev 
map gre cd /etc
map grs cd /sys
map grt cd /tmp 
map grv cd /var

map gp cd ~/pictures
map go cd ~/downloads
map gv cd ~/videos
map gV cd ~/VM/
map gc cd ~/.config
map gC cd ~/dotfiles

map <enter> shell
map q quitcd
map o quit
cmd quitcd ${{
	echo "1" > "$LF_TEMPDIR"/cdtolastdir
	lf -remote "send $id quit"
}}

